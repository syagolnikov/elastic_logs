input {
        beats {
                port => 5044
        }
}

filter {
	  if "log/harvester.go" in [message] {
                  drop { }
          }
          if "Non-zero metrics" in [message] {
                  drop { }
          }
        grok {
                match => { "message" => ["%{SYSLOGTIMESTAMP:[system][auth][timestamp]} %{SYSLOGHOST:[system][auth][hostname]} sshd(?:\[%{POSINT:[system][auth][pid]}\])?: %{DATA:[system][auth][ssh][event]} %{DATA:[system][auth][ssh][method]} for (invalid user )?%{DATA:[system][auth][user]} from %{IPORHOST:[system][auth][ssh][ip]} port %{NUMBER:[system][auth][ssh][port]} ssh2(: %{GREEDYDATA:[system][auth][ssh][signature]})?",
                    "%{SYSLOGTIMESTAMP:[system][auth][timestamp]} %{SYSLOGHOST:[system][auth][hostname]} sshd(?:\[%{POSINT:[system][auth][pid]}\])?: %{DATA:[system][auth][ssh][event]} user %{DATA:[system][auth][user]} from %{IPORHOST:[system][auth][ssh][ip]}",
                    "%{SYSLOGTIMESTAMP:[system][auth][timestamp]} %{SYSLOGHOST:[system][auth][hostname]} sshd(?:\[%{POSINT:[system][auth][pid]}\])?: Did not receive identification string from %{IPORHOST:[system][auth][ssh][dropped_ip]}",
                    "%{SYSLOGTIMESTAMP:[system][auth][timestamp]} %{SYSLOGHOST:[system][auth][hostname]} sudo(?:\[%{POSINT:[system][auth][pid]}\])?: \s*%{DATA:[system][auth][user]} :( %{DATA:[system][auth][sudo][error]} ;)? TTY=%{DATA:[system][auth][sudo][tty]} ; PWD=%{DATA:[system][auth][sudo][pwd]} ; USER=%{DATA:[system][auth][sudo][user]} ; COMMAND=%{GREEDYDATA:[system][auth][sudo][command]}",
                    "%{SYSLOGTIMESTAMP:[system][auth][timestamp]} %{SYSLOGHOST:[system][auth][hostname]} groupadd(?:\[%{POSINT:[system][auth][pid]}\])?: new group: name=%{DATA:system.auth.groupadd.name}, GID=%{NUMBER:system.auth.groupadd.gid}",
                    "%{SYSLOGTIMESTAMP:[system][auth][timestamp]} %{SYSLOGHOST:[system][auth][hostname]} useradd(?:\[%{POSINT:[system][auth][pid]}\])?: new user: name=%{DATA:[system][auth][user][add][name]}, UID=%{NUMBER:[system][auth][user][add][uid]}, GID=%{NUMBER:[system][auth][user][add][gid]}, home=%{DATA:[system][auth][user][add][home]}, shell=%{DATA:[system][auth][user][add][shell]}$",
                    "%{SYSLOGTIMESTAMP:[system][auth][timestamp]} %{SYSLOGHOST:[system][auth][hostname]} %{DATA:[system][auth][program]}(?:\[%{POSINT:[system][auth][pid]}\])?: %{GREEDYMULTILINE:[system][auth][message]}"] }
            pattern_definitions => {
            "GREEDYMULTILINE"=> "(.|\n)*"
                }
        }

  #perform geolookup based on server's IP
  if [fields][server_public_ip] {
	 geoip {
                source => "[fields][server_public_ip]"
                database => "/usr/share/logstash/mm_db/GeoLite2-City.mmdb"
                target => "server_geoip"
         }
      }

  #inspect syslog system.auth.ssh.ip and tag document as internal ip if within specified range
	if [system][auth][ssh][ip] {
		cidr {
			add_tag => [ "internal_ip" ]
    			address => [ "%{[system][auth][ssh][ip]}" ]
    			network => [ "10.0.0.0/8", "127.0.0.1", "172.16.0.0/12", "192.168.0.0/16", "0.0.0.0/32" ]
		}
    mutate {
          copy => {"[system][auth][ssh][ip]" => "fields.client_lan_ip" }
    }
	}

  #if internal_ip tag found, copy public_server_ip to system.auth.ssh.ip object for save original CIDR IP as client_lan_ip
	if "internal_ip" in [tags] {
		mutate {
    			replace => [ "[system][auth][ssh][ip]", "%{[fields][server_public_ip]}" ]

		}
	}

  #if client IP exists, perform geolocation either on public address found or public ip of server
	if [system][auth][ssh][ip] {
		geoip {
			source => "[system][auth][ssh][ip]"
               		database => "/usr/share/logstash/mm_db/GeoLite2-City.mmdb"
               		target => "client_geoip"
		}
	}

  #process json files from docker containers, remove unnecessary logs, and then perform grok
	if [docker][container][name] {

	  if "_grokparsefailure" in [tags] {
                mutate {
                        remove_tag => [ "_grokparsefailure" ]
                }
          }
          json {
                	source => "message"
               		target => "docker_message"
		           }
          grok {
                  match => { "[docker_message][log]" => ["%{IPORHOST:docker.container.container_ip} %{USER:docker.container.ident} %{USER:docker.container.auth} \[%{HTTPDATE:docker.container.timestamp}\] \"(?:%{WORD:docker.container.verb} %{NOTSPACE:docker.container.request}(?: HTTP/%{NUMBER:docker.container.httpversion})?|%{DATA:docker.container.rawrequest})\" %{NUMBER:docker.container.response} (?:%{NUMBER:docker.container.bytes}|-)"] }
          }
	}
}

output {
        elasticsearch {
                index => "filebeat-%{+yyyy.MM.dd}"
		            hosts => ["elasticsearch:9200"]
	}
}
